#+TITLE: zig-curl
#+DATE: 2023-09-16T23:16:15+0800
#+LASTMOD: 2024-01-21T11:56:14+0800
#+OPTIONS: toc:nil num:nil
#+STARTUP: content

[[https://github.com/jiacai2050/zig-curl/actions/workflows/CI.yml][https://github.com/jiacai2050/zig-curl/actions/workflows/CI.yml/badge.svg]]

Zig bindings to [[https://curl.haxx.se/libcurl/][libcurl]], a free and easy-to-use client-side URL transfer library.

#+begin_quote
This package is in its early stage, although the core functionality works right now, the API is still subject to changes.

=zig-curl= only support [[https://ziglang.org/download/][Zig master]], and any contributions are welcomed. ⚒️
#+end_quote

The builtin libcurl consists of:
| lib     | commit |
|---------+--------|
| zlib    | [[https://github.com/madler/zlib/tree/v1.3][1.3]]    |
| mbedtls | [[https://github.com/Mbed-TLS/mbedtls/tree/v3.5.1][3.5.1]]  |
| libcurl | [[https://github.com/curl/curl/tree/curl-8_5_0][8.5.0]]  |

* Usage
#+begin_src zig
const curl = @import("curl");

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer if (gpa.deinit() != .ok) @panic("leak");
    const allocator = gpa.allocator();

    const easy = try curl.Easy.init(allocator, .{});
    defer easy.deinit();

    const resp = try easy.get("http://httpbin.org/anything");
    defer resp.deinit();

    std.debug.print("Status code: {d}\nBody: {s}\n", .{
        resp.status_code,
        resp.body.items,
    });
}
#+end_src
See [[file:examples/basic.zig]], [[file:examples/advanced.zig]] for more usage.

* Installation
=zig-curl= support [[https://ziglang.org/download/0.11.0/release-notes.html#Package-Management][module]] introduced in Zig 0.11.

First add this package to =build.zig.zon= of your project like this:
#+begin_src zig
.{
    .dependencies = .{
        .curl = .{
            .url = "https://github.com/jiacai2050/zig-curl/archive/${COMMIT}.tar.gz",
            .hash = "${HASH}",
        },
    },
}
#+end_src
Replace =${COMMIT}= with a real one, =.hash= field is difficult to get now, you can fill in a fake one like =1220b5dafa54081ce54f108d0b7fa9451149bde7dc7c20f4e14e322fdeeb7a1dfd9d=, then run =zig build=, it should throw following similar error:
#+begin_example
Fetch Packages [1/1] curl... /Users/jiacai/playground/zig-demo/build.zig.zon:7:21: error: hash mismatch: expected: 1220b5dafa54081ce54f108d0b7fa9451149bde7dc7c20f4e14e322fdeeb7a1dfd9d, found: 122079741f4df43f426c87585058123be0e0fa3fda3985d9d88341d3d03f8484e105
            .hash = "1220b5dafa54081ce54f108d0b7fa9451149bde7dc7c20f4e14e322fdeeb7a1dfd9d",
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#+end_example

The =found:= section output the real hash, copy that to =build.zig.zon=.

Then in your =build.zig=, access the module like this:
#+begin_src zig
const curl = b.dependency("curl", .{});

// add curl module to an executable.
exe.addModule("curl", curl.module("curl"));
// For builtin libcurl
exe.linkLibrary(curl.artifact("curl"));
// For system-wide libcurl
exe.linkSystemLibrary("curl");
exe.linkLibC();
#+end_src

* Roadmap
- [ ] Currently only easy API is supported, support [[https://curl.se/libcurl/c/libcurl-multi.html][multi API]].
- [ ] Support parse response header when [[https://curl.se/libcurl/c/curl_easy_header.html][libcurl < 7.84.0]]

* License
[[file:LICENSE][MIT]]
